<!DOCTYPE HTML>
<html>

<head>
  <style>
    #snowflakeContainer {
      position: absolute;
      left: 0px;
      top: 0px;
      display: none;
    }

    .snowflake {
      position: fixed;
      background-color: #CCC;
      user-select: none;
      z-index: 1000;
      pointer-events: none;
      border-radius: 50%;
      width: 10px;
      height: 10px;
    }
  </style>

  <div id="snowflakeContainer">
    <span class="snowflake"></span>
  </div>

  <script>
    // Array to store our Snowflake objects
    var snowflakes = [];

    // Global variables to store our browser's window size
    var browserWidth;
    var browserHeight;

    // Specify the number of snowflakes you want visible
    var numberOfSnowflakes = 50;

    // Flag to reset the position of the snowflakes
    var resetPosition = false;

    // Handle accessibility
    var enableAnimations = false;
    var reduceMotionQuery = matchMedia("(prefers-reduced-motion)");

    // Handle animation accessibility preferences 
    function setAccessibilityState() {
      if (reduceMotionQuery.matches) {
        enableAnimations = false;
      } else {
        enableAnimations = true;
      }
    }
    setAccessibilityState();

    reduceMotionQuery.addListener(setAccessibilityState);

    //
    // It all starts here...
    //
    function setup() {
      if (enableAnimations) {
        window.addEventListener("DOMContentLoaded", generateSnowflakes, false);
        window.addEventListener("resize", setResetFlag, false);
      }
    }
    setup();

    //
    // Constructor for our Snowflake object
    //
    function Snowflake(element, speed, xPos, yPos) {
      // set initial snowflake properties
      this.element = element;
      this.speed = speed;
      this.xPos = xPos;
      this.yPos = yPos;
      this.scale = 1;

      // declare variables used for snowflake's motion
      this.counter = 0;
      this.sign = Math.random() < 0.5 ? 1 : -1;

      // setting an initial opacity and size for our snowflake
      this.element.style.opacity = (.1 + Math.random()) / 3;
    }

    //
    // The function responsible for actually moving our snowflake
    //
    Snowflake.prototype.update = function () {
      // using some trigonometry to determine our x and y position
      this.counter += this.speed / 5000;
      this.xPos += this.sign * this.speed * Math.cos(this.counter) / 40;
      this.yPos += Math.sin(this.counter) / 40 + this.speed / 30;
      this.scale = .5 + Math.abs(10 * Math.cos(this.counter) / 20);

      // setting our snowflake's position
      setTransform(Math.round(this.xPos), Math.round(this.yPos), this.scale, this.element);

      // if snowflake goes below the browser window, move it back to the top
      if (this.yPos > browserHeight) {
        this.yPos = -50;
      }
    }

    //
    // A performant way to set your snowflake's position and size
    //
    function setTransform(xPos, yPos, scale, el) {
      el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0) scale(${scale}, ${scale})`;
    }

    //
    // The function responsible for creating the snowflake
    //
    function generateSnowflakes() {

      // get our snowflake element from the DOM and store it
      var originalSnowflake = document.querySelector(".snowflake");

      // access our snowflake element's parent container
      var snowflakeContainer = originalSnowflake.parentNode;
      snowflakeContainer.style.display = "block";

      // get our browser's size
      browserWidth = document.documentElement.clientWidth;
      browserHeight = document.documentElement.clientHeight;

      // create each individual snowflake
      for (var i = 0; i < numberOfSnowflakes; i++) {

        // clone our original snowflake and add it to snowflakeContainer
        var snowflakeClone = originalSnowflake.cloneNode(true);
        snowflakeContainer.appendChild(snowflakeClone);

        // set our snowflake's initial position and related properties
        var initialXPos = getPosition(50, browserWidth);
        var initialYPos = getPosition(50, browserHeight);
        var speed = 5 + Math.random() * 40;

        // create our Snowflake object
        var snowflakeObject = new Snowflake(snowflakeClone,
          speed,
          initialXPos,
          initialYPos);
        snowflakes.push(snowflakeObject);
      }

      // remove the original snowflake because we no longer need it visible
      snowflakeContainer.removeChild(originalSnowflake);

      moveSnowflakes();
    }

    //
    // Responsible for moving each snowflake by calling its update function
    //
    function moveSnowflakes() {

      if (enableAnimations) {
        for (var i = 0; i < snowflakes.length; i++) {
          var snowflake = snowflakes[i];
          snowflake.update();
        }
      }

      // Reset the position of all the snowflakes to a new value
      if (resetPosition) {
        browserWidth = document.documentElement.clientWidth;
        browserHeight = document.documentElement.clientHeight;

        for (var i = 0; i < snowflakes.length; i++) {
          var snowflake = snowflakes[i];

          snowflake.xPos = getPosition(50, browserWidth);
          snowflake.yPos = getPosition(50, browserHeight);
        }

        resetPosition = false;
      }

      requestAnimationFrame(moveSnowflakes);
    }

    //
    // This function returns a number between (maximum - offset) and (maximum + offset)
    //
    function getPosition(offset, size) {
      return Math.round(-1 * offset + Math.random() * (size + 2 * offset));
    }

    //
    // Trigger a reset of all the snowflakes' positions
    //
    function setResetFlag(e) {
      resetPosition = true;
    }
  </script>
  <style>
    p {
      font-size: 20px;
      color: blue;
    }
  </style>
  <p>Snake v7.0</p>
  <meta charset="UTF-8">
  <title>Snake v7.0</title>
  <link rel="icon" href="snake/favicon/snake.ico" type="image/ico">
  <style type="text/css">
    @import url("https://fonts.googleapis.com/css?family=VT323");

    ::selection {
      color: #FFFFFF;
      background: transparent;
    }

    ::-moz-selection {
      color: #FFFFFF;
      background: transparent;
    }

    * {
      margin: 0;
      padding: 0;
      font-family: "VT323";
    }


    a {

      text-decoration: line;
      font-size: 20pt;
      text-align: center;
      margin-left: auto;
      margin-right: auto;
    }


    k {
      font-size: 20px;
      color: red;
      margin-bottom: auto;
    }

    div.a {
      color: #000000;
      text-align: center;
      font-size: 40px;
    }

    body {
      background-color: #000000;
    }

    .wrap {
      margin-left: auto;
      margin-right: auto;
    }

    text {
      height: 20 position: center
    }

    #help h1 {
      width: 340px;
      position: center;
      margin-left: auto;
      margin-right: auto;
      font-family: "VT323";
      color: #FFFFFF;
    }

    header {
      width: 340px;
      font-size: 0;
      position: center;
    }

    canvas {
      display: none;
      border-style: solid;
      border-width: 10px;
      border-color: #FFFFFF;
    }

    canvas:focus {
      outline: none;
    }

    /* Top Styles */
    h1 {
      display: block;
      width: 100px;
      font-size: 32px;
      color: #FFFFFF;
      -webkit-animation: logo-ani 1ms linear;
      animation: logo-ani 1ms linear;
      margin-bottom: 30px;
      cursor: help;

    }

    .score {
      display: inline-block;
      width: 240px;
      font-size: 25px;
      text-align: right;
    }

    .score_value {
      font-size: inherit;
    }

    /* All screens style */
    #gameover a,
    #setting a,
    #menu a {
      display: block;
    }

    #gameover a,
    #setting a:hover,
    #menu a:hover {
      cursor: pointer;
    }

    #gameover a:hover::before,
    #setting a:hover::before,
    #menu a:hover::before {
      content: ">";
      margin-right: 10px;
    }

    /* Menu Screen Style */
    #menu {
      display: block;
      width: 340px;
      padding-top: 95px;
      padding-bottom: 95px;
      font-size: 40px;
      margin-left: auto;
      margin-right: auto;
      text-align: center;
    }

    #menu h2 {
      -webkit-animation: logo-ani 1000ms ease-in infinite;
      animation: logo-ani 1000ms ease-in infinite;
      margin-bottom: 30px;

    }

    #menu a {
      font-size: 30px;
    }

    @-webkit-keyframes logo-ani {
      50% {
        -webkit-transform: scale(1.3, 1.3);
      }

      100% {
        -webkit-transform: scale(1.0, 1.0);
      }
    }

    @keyframes logo-ani {
      50% {
        transform: scale(1.3, 1.3);
      }

      100% {
        transform: scale(1.0, 1.0);
      }
    }

    /* Game Over Screen Style */

    #gameover {
      display: none;
      width: 340px;
      padding-top: 95px;
      padding-bottom: 95px;
      margin-left: auto;
      margin-right: auto;
      text-align: center;
      font-size: 30px;
      color: blue;
      cursor: wait
    }

    li {
      display: inline-block;
      float: left;
      white-space: 5px;
    }

    #gameover h2 {
      text-align: center;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 50px;
      cursor: help;
      color: blue;
      animation-duration: 3s;
      animation-name: slidein;
    }

    @keyframes slidein {
      from {
        margin-left: 100%;
        width: 300%;
      }

      to {
        margin-left: 0%;
        width: 100%;
      }
    }

    #gameover p {

      margin-top: 75px;
      font-size: 20px;
    }

    /* Settings Screen Style */
    #setting {

      display: none;
      width: 340px;
      margin-left: auto;
      margin-right: auto;
      padding-top: 85px;
      padding-bottom: 85px;
      font-size: 30px;
      color: red;
      text-align: center;
      cursor: wait;
    }

    #setting h2 {

      margin-bottom: 15px;
      text-align: center;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 30px;
      cursor: pointer;
      color: red;
    }

    #setting p {

      margin-top: 10px;
      font-size: 30px;
    }

    #setting input {

      display: none;
      content: '-->';
    }

    #setting label {

      cursor: pointer;
    }

    #setting input:checked+label {

      background-color: #000fff;
      color: #FFFFFF;
    }

    highlight {

      size: 40px;
      color: blue;
    }

    ul {

      display: inline-block;
    }
  </style>
  <style>
    b {

      font-size: 75px;
      animation: color-change 5s infinite;
    }

    @keyframes color-change {
      0% {
        color: green;
      }

      50% {
        color: red;
      }

      100% {
        color: green;
      }
    }
  </style>
  <style>
    {

      font-size: 75px;
      animation: color-change 5s infinite;
    }

    @keyframes color-change {
      0# {
        color: green;
      }

      50% {
        color: red;
      }

      100% {
        color: green;
      }
    }
  </style>
  <br />
  <header class="wrap">
    <p class="score">Apples Eaten: <span id="score_value">0</span></p>

  </header>
  <canvas class="wrap" id="snake" width="420" height="420" tabindex="1"></canvas>
  <!-- Game Over Screen -->
  <div id="gameover">
    <h2 style="color:red">Game Over</h2>
    <p style="color:green">press <span style="background-color: green; color: red">the 'enter' key</span> to begin a new
      game</p>
    <a id="newgame_gameover">new game</a>
    <a id="setting_gameover">settings</a>
  </div>
  <!-- Setting screen -->
  <div id="setting">
    <h2>Settings</h2>
    <a id="newgame_setting">new game</a>
    <ul>
      <p type="list" style="color:red">Speed:
        <li>
          <input id="speedSLOW" type="radio" name="speed" value="100" />
          <label for="speedSLOW" style="color:green">super slow.</label>
          <input id="speed2" type="radio" name="speed" value="60" />
          <label for="speed2" style="color:red">Slow</label>
          <input id="speed3" type="radio" name="speed" value="45" checked />
          <label for="speed3" style="color:green">Normal</label>
          <input id="speed4" type="radio" name="speed" value="30" />
          <label for="speed4" style="color:red">Fast</label>
        </li>

      <p>Wall:
        <li><input id="wallon" type="radio" name="wall" value="1" checked />
          <label for="wallon">on</label>
          <input id="walloff" type="radio" name="wall" value="0" />
          <label for="walloff">off</label>
        </li>
    </ul>
  </div>
  <!-- Main Menu Screen -->
  <div id="menu">
    <b>Snake</b>

    <a id="newgame_menu" style="color:red">Play</a>
    <a id="setting_menu" style="color:green">Settings</a>

    <k style="color: red" align="bottom">use</k>
    <k style="color:green">W A S D</k>
    <k style="color:red">or ARROW KEYS
      <k style="color:green" align="bottom">to move snake.</k>
  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script>
    (function () {

      /////////////////////////////////////////////////////////////

      // Canvas & Context

      var canvas;
      var ctx;

      // Snake

      var snake;
      var apple;
      var snake_dir;
      var snake_next_dir;
      var snake_speed;
      var $;
      var input;

      // Food

      var food = {
        x: 0,
        y: 0
      };


      // Score

      var score;

      // Wall

      var wall;

      // HTML Elements

      var screen_snake;
      var screen_menu;
      var screen_setting;
      var screen_gameover;
      var button_newgame_menu;
      var button_newgame_setting;
      var button_newgame_gameover;
      var button_setting_menu;
      var button_setting_gameover;
      var ele_score;
      var speed_setting;
      var wall_setting;
      var activeDot;

      /////////////////////////////////////////////////////////////

      var activeDot = function (x, y) {
        ctx.fillStyle = "#00FF00"
        ctx.fillRect(x * 10, y * 10, 10, 10);
      };
      /////////////////////////////////////////////////////////////

      var changeDir = function (key) {

        if (key == 87 && snake_dir != 2) {
          snake_next_dir = 0;
        } else {

          if (key == 68 && snake_dir != 3) {
            snake_next_dir = 1;
          } else {

            if (key == 83 && snake_dir != 0) {
              snake_next_dir = 2;
            } else {

              if (key == 65 && snake_dir != 1) {
                snake_next_dir = 3;
              }
            }
          }
        }
        if (key == 38 && snake_dir != 2) {
          snake_next_dir = 0;
        } else {

          if (key == 39 && snake_dir != 3) {
            snake_next_dir = 1;
          } else {

            if (key == 40 && snake_dir != 0) {
              snake_next_dir = 2;
            } else {

              if (key == 37 && snake_dir != 1) {
                snake_next_dir = 3;
              }
            }
          }
        }
        if (key == gamepad.buttons[12].pressed && snake_dir != 2) {
          snake_next_dir = 0;
        } else {

          if (key == gamepad.buttons[15].pressed && snake_dir != 3) {
            snake_next_dir = 1;
          } else {

            if (key == gamepad.buttons[13].pressed && snake_dir != 0) {
              snake_next_dir = 2;
            } else {

              if (key == gamepad.buttons[14].pressed && snake_dir != 1) {
                snake_next_dir = 3;
              }
            }
          }
        }
      };

      /////////////////////////////////////////////////////////////

      var addFood = function () {
        food.x = Math.floor(Math.random() * ((canvas.width / 10) - 1));
        food.y = Math.floor(Math.random() * ((canvas.height / 10) - 1));
        for (var i = 0; i < snake.length; i++) {
          if (checkBlock(food.x, food.y, snake[i].x, snake[i].y)) {
            addFood(1);
          }
        }
      };

      /////////////////////////////////////////////////////////////

      var checkBlock = function (x, y, _x, _y) {
        return (x == _x && y == _y) ? true : false;
      };

      /////////////////////////////////////////////////////////////

      var altScore = function (score_val) {
        ele_score.innerHTML = String(score_val);
      };

      /////////////////////////////////////////////////////////////

      var mainLoop = function () {

        var _x = snake[0].x;
        var _y = snake[0].y;
        snake_dir = snake_next_dir;

        // 0 - Up, 1 - Right, 2 - Down, 3 - Left
        switch (snake_dir) {
          case 0:
            _y--;
            break;
          case 1:
            _x++;
            break;
          case 2:
            _y++;
            break;
          case 3:
            _x--;
            break;
        }

        snake.pop();
        snake.unshift({
          x: _x,
          y: _y
        });


        // --------------------

        // Wall

        if (wall == 1) {
          // On
          if (snake[0].x < 0 || snake[0].x == canvas.width / 10 || snake[0].y < 0 || snake[0].y == canvas.height / 10) {
            showScreen(3);
            return;
          }
        } else {
          // Off
          for (var i = 0, x = snake.length; i < x; i++) {
            if (snake[i].x < 0) {
              snake[i].x = snake[i].x + (canvas.width / 10);
            }
            if (snake[i].x == canvas.width / 10) {
              snake[i].x = snake[i].x - (canvas.width / 10);
            }
            if (snake[i].y < 0) {
              snake[i].y = snake[i].y + (canvas.height / 10);
            }
            if (snake[i].y == canvas.height / 10) {
              snake[i].y = snake[i].y - (canvas.height / 10);
            }
          }
        }

        // --------------------

        // Autophagy death
        for (var i = 1; i < snake.length; i++) {
          if (snake[0].x == snake[i].x && snake[0].y == snake[i].y) {
          }
        }

        // --------------------

        // Eat Food
        if (checkBlock(snake[0].x, snake[0].y, food.x, food.y)) {
          snake[snake.length] = {
            x: snake[0].x,
            y: snake[0].y
          };
          score += 1;
          altScore(score);
          addFood();
          activeDot(food.x, food.y);
        }

        // --------------------

        ctx.beginPath();
        ctx.fillStyle = "#000000";
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // --------------------

        for (var i = 0; i < snake.length; i++) {
          activeDot(snake[i].x, snake[i].y);
        }

        // --------------------

        activeDot(food.x, food.y);

        // Debug
        //document.getElementById("debug").innerHTML = snake_dir + " " + snake_next_dir + " " + snake[0].x + " " + snake[0].y;

        setTimeout(mainLoop, snake_speed);
      };

      /////////////////////////////////////////////////////////////

      var newGame = function () {

        showScreen(0);
        screen_snake.focus();

        snake = [];
        for (var i = 4; i >= 0; i--) {
          snake.push({
            x: i,
            y: 15
          });
        }

        snake_next_dir = 1;

        score = 0;
        altScore(score);

        addFood();

        canvas.onkeydown = function (evt) {
          evt = evt || window.event;
          changeDir(evt.keyCode);
        };
        mainLoop();

      };

      /////////////////////////////////////////////////////////////

      // Change the snake speed...
      // 100 = super slow
      // 60 = slow
      // 45 = normal
      // 3o = fast
      var setSnakeSpeed = function (speed_value) {
        snake_speed = speed_value;
      };

      /////////////////////////////////////////////////////////////
      var setWall = function (wall_value) {
        wall = wall_value;
        if (wall == 0) {
          screen_snake.style.borderColor = "#606060";
        }
        if (wall == 1) {
          screen_snake.style.borderColor = "##C0C0C0	";
        }
        if (wall == 2) {
          screen_snake.style.borderColor = "#000000";

        }
      };
      /////////////////////////////////////////////////////////////

      // 0 for the game
      // 1 for the main menu
      // 2 for the settings screen
      // 3 for the game over screen
      var showScreen = function (screen_opt) {
        switch (screen_opt) {

          case 0:
            screen_snake.style.display = "block";
            screen_menu.style.display = "none";
            screen_setting.style.display = "none";
            screen_gameover.style.display = "none";
            break;

          case 1:
            screen_snake.style.display = "none";
            screen_menu.style.display = "block";
            screen_setting.style.display = "none";
            screen_gameover.style.display = "none";
            break;

          case 2:
            screen_snake.style.display = "none";
            screen_menu.style.display = "none";
            screen_setting.style.display = "block";
            screen_gameover.style.display = "none";
            break;

          case 3:
            screen_snake.style.display = "none";
            screen_menu.style.display = "none";
            screen_setting.style.display = "none";
            screen_gameover.style.display = "block";
            break;
        }
      };

      /////////////////////////////////////////////////////////////

      window.onload = function () {

        canvas = document.getElementById("snake");
        ctx = canvas.getContext("2d");

        // Screens
        screen_snake = document.getElementById("snake");
        screen_menu = document.getElementById("menu");
        screen_gameover = document.getElementById("gameover");
        screen_setting = document.getElementById("setting");

        // Buttons
        button_newgame_menu = document.getElementById("newgame_menu");
        button_newgame_setting = document.getElementById("newgame_setting");
        button_newgame_gameover = document.getElementById("newgame_gameover");
        button_setting_menu = document.getElementById("setting_menu");
        button_setting_gameover = document.getElementById("setting_gameover");

        // etc
        ele_score = document.getElementById("score_value");
        speed_setting = document.getElementsByName("speed");
        wall_setting = document.getElementsByName("wall");

        // --------------------

        button_newgame_menu.onclick = function () {
          newGame();
        };
        button_newgame_gameover.onclick = function () {
          newGame();
        };
        button_newgame_setting.onclick = function () {
          newGame();
        };
        button_setting_menu.onclick = function () {
          showScreen(2);
        };
        button_setting_gameover.onclick = function () {
          showScreen(2);
        };

        setSnakeSpeed(150);
        setWall(1);

        showScreen("snake");

        // --------------------
        // Settings

        // speed
        for (var i = 0; i < speed_setting.length; i++) {
          speed_setting[i].addEventListener("click", function () {
            for (var i = 0; i < speed_setting.length; i++) {
              if (speed_setting[i].checked) {
                setSnakeSpeed(speed_setting[i].value);
              }
            }
          });
        }

        // wall
        for (var i = 0; i < wall_setting.length; i++) {
          wall_setting[i].addEventListener("click", function () {
            for (var i = 0; i < wall_setting.length; i++) {
              if (wall_setting[i].checked) {
                setWall(wall_setting[i].value);
              }
            }
          });
        }

        for (var i = 2; i < wall_setting.length; i++) {
          wall_setting[i].addEventListener("click", function () {
            for (var i = 2; i < wall_setting.length; i++) {
              if (wall_setting[i].checked) {
                setWall(wall_setting[i].value);
              }
            }
          });
        }

        ///////////////////////////////////////////////////////////

        document.onkeydown = function (evt) {
          if (screen_gameover.style.display == "block") {
            evt = evt || window.event;
            if (event.keyCode == 13) {
              newGame();
            }
          }
        };
      };

    })();

    $(window).keydown(function (e) {
      switch (e.keyCode) {
        case 37:
          input.left = true;
          break;
        case 39:
          input.right = true;
          break;
      }
    });

    $(window).keyup(function (e) {
      switch (e.keyCode) {
        case 37:
          input.left = false;
          break;
        case 39:
          input.right = false;
          break;
      }
    });
    console.log(navigator.getGamepads());
  </script>
  </body>
